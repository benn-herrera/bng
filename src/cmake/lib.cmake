get_filename_component(LIB_TARGET "${CMAKE_CURRENT_SOURCE_DIR}" NAME)

file(GLOB_RECURSE AIO_SOURCE RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/*AIO.cpp")
if(AIO_SOURCE)
	file(REMOVE "${AIO_SOURCE}")
endif()

file(GLOB_RECURSE HEADERS RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/*.h")
file(GLOB_RECURSE SOURCES RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")
file(GLOB_RECURSE TEST_SOURCES RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/tests/*.cpp" )
file(GLOB_RECURSE TEST_HEADERS RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/tests/*.h" )

list(REMOVE_ITEM SOURCES ${TEST_SOURCES})
list(REMOVE_ITEM HEADERS ${TEST_HEADERS})

set(AIO_SOURCE "${LIB_TARGET}AIO.cpp")
file(WRITE "${AIO_SOURCE}" "// generated unity build file for ${LIB_TARGET}\n")
foreach(SOURCE IN LISTS SOURCES)
	file(APPEND "${AIO_SOURCE}" "#include \"${SOURCE}\"\n")
endforeach()

include_directories("${CMAKE_CURRENT_SOURCE_DIR}")
set_source_files_properties(${SOURCES} PROPERTIES HEADER_FILE_ONLY true)

add_library(
	${LIB_TARGET} STATIC ${HEADERS} ${SOURCES} ${AIO_SOURCE}
	)

set(LIB_TARGET_TESTS ${LIB_TARGET}_tests)
add_custom_target(${LIB_TARGET_TESTS})
set_target_properties(${LIB_TARGET_TESTS} PROPERTIES EXCLUDE_FROM_ALL true)

foreach(TEST_SOURCE IN LISTS TEST_SOURCES)
	get_filename_component(TEST_TARGET "${TEST_SOURCE}" NAME_WE)
	set(TEST_TARGET "test_${LIB_TARGET}_${TEST_TARGET}")
	add_executable(${TEST_TARGET} EXCLUDE_FROM_ALL ${TEST_HEADERS} ${TEST_SOURCE})
	add_dependencies(${LIB_TARGET_TESTS} ${TEST_TARGET})
	target_link_libraries(${TEST_TARGET} ${LIB_TARGET})
	set_target_properties(${TEST_TARGET}
	    PROPERTIES
	    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/tests/"
	)	
endforeach()
